<Content>
    <Row>
        <Column Base="2">
            @(Transaction.Count)x
        </Column>
        <Column Base="2">
            @Article.Name
        </Column>
        @if (Transaction.Type == TransactionType.Addition)
        {
            <Column Base="2">
                <span class="badge badge-success">Zugang</span>
            </Column>
        }
        @if (Transaction.Type == TransactionType.Removal)
        {
            <Column Base="2">
                <span class="badge badge-danger">Abgang</span>
            </Column>
        }
        @if (Transaction.Type == TransactionType.Buying)
        {
            <Column Base="2">
                <span class="badge badge-warning">Bestellung</span>
            </Column>
        }
        <Column Base="3">
            @if (!string.IsNullOrWhiteSpace(Transaction.Note))
            {
                    <span> (@Transaction.Note)</span>
            }
        </Column>
        @if (Transaction.Type == TransactionType.Buying)
        {
            <Column Base="3">
                <button class="btn btn-block btn-primary" @onclick="@Angekommen">Angekommen</button>
            </Column>
        }
    </Row>
</Content>

@code {
    [Parameter]
    public string TransactionId { get; set; }

    [Parameter]
    public TransactionDTO Transaction { get; set; }

    [Parameter]
    public ArticleDTO Article { get; set; }

    [CascadingParameter(Name = "TransactionDb")]
    public LocalForageStore? ForageTransactionDb { get; set; }

    private async Task Angekommen()
    {
        Transaction = Transaction with {Type = TransactionType.Addition};
        await ForageTransactionDb.SetItem(TransactionId, Transaction);
        StateHasChanged();
    }
}